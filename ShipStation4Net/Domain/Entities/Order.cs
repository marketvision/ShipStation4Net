#region License
/*
 * Copyright 2017 Brandon James
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
#endregion

using Newtonsoft.Json;
using ShipStation4Net.Domain.Enumerations;
using System;
using System.Collections.Generic;

namespace ShipStation4Net.Domain.Entities
{
    public class Order : IEntity
    {
        /// <summary>
        /// The system generated identifier for the order. This is a read-only field.
        /// </summary>
        [JsonProperty("orderId")]
        public long? OrderId { get; set; }

        /// <summary>
        /// A user-defined order number used to identify an order.
        /// </summary>
        [JsonProperty("orderNumber")]
        public string OrderNumber { get; set; }

        /// <summary>
        /// A user-provided key that should be unique to each order.
        /// </summary>
        [JsonProperty("orderKey")]
        public string OrderKey { get; set; }

        /// <summary>
        /// The date the order was placed.
        /// </summary>
        [JsonProperty("orderDate")]
        public DateTime? OrderDate { get; set; }

        /// <summary>
        /// The date the order was paid for.
        /// </summary>
        [JsonProperty("paymentDate")]
        public DateTime? PaymentDate { get; set; }

        /// <summary>
        /// The date the order is to be shipped before or on. This field is a suggested value generated by the order source/platform/cart
        /// and passed to ShipStation. Not all ShipStation integrations support this field and will show null if absent.
        /// </summary>
        [JsonProperty("shipByDate")]
        public DateTime? ShipByDate { get; set; }

        /// <summary>
        /// The order's status. Possible values: "awaiting_payment", "awaiting_shipment", "shipped", "on_hold", "cancelled".
        /// </summary>
        [JsonProperty("orderStatus")]
        public OrderStatus? OrderStatus { get; set; }

        /// <summary>
        /// Unique identifier for the customer. Generated by ShipStation the first time the customer record is created. Read-Only
        /// </summary>
        [JsonProperty("customerId")]
        public int? CustomerId { get; set; }

        /// <summary>
        /// Identifier for the customer in the originating system. This is typically a username or email address.
        /// </summary>
        [JsonProperty("customerUsername")]
        public string CustomerUsername { get; set; }

        /// <summary>
        /// The customer's email address.
        /// </summary>
        [JsonProperty("customerEmail")]
        public string CustomerEmail { get; set; }

        /// <summary>
        /// The recipients billing address.
        /// </summary>
        [JsonProperty("billTo")]
        public Address BillTo { get; set; }

        /// <summary>
        /// The recipients shipping address.
        /// </summary>
        [JsonProperty("shipTo")]
        public Address ShipTo { get; set; }

        /// <summary>
        /// Array of purchased items.
        /// </summary>
        [JsonProperty("items")]
        public IList<OrderItem> Items { get; set; }

        /// <summary>
        /// The order total. Please note is this a read-only field.
        /// </summary>
        [JsonProperty("orderTotal")]
        public double? OrderTotal { get; set; }

        /// <summary>
        /// The total amount paid for the Order.
        /// </summary>
        [JsonProperty("amountPaid")]
        public double? AmountPaid { get; set; }

        /// <summary>
        /// The total tax amount for the Order.
        /// </summary>
        [JsonProperty("taxAmount")]
        public double? TaxAmount { get; set; }

        /// <summary>
        /// Shipping amount paid by the customer, if any.
        /// </summary>
        [JsonProperty("shippingAmount")]
        public double? ShippingAmount { get; set; }

        /// <summary>
        /// Notes left by the customer when placing the order.
        /// </summary>
        [JsonProperty("customerNotes")]
        public string CustomerNotes { get; set; }

        /// <summary>
        /// Private notes that are only visible to the seller.
        /// </summary>
        [JsonProperty("internalNotes")]
        public string InternalNotes { get; set; }

        /// <summary>
        /// Specifies whether or not this Order is a gift
        /// </summary>
        [JsonProperty("gift")]
        public bool? IsGift { get; set; }

        /// <summary>
        /// Gift message left by the customer when placing the order.
        /// </summary>
        [JsonProperty("giftMessage")]
        public string GiftMessage { get; set; }

        /// <summary>
        /// Method of payment used by the customer.
        /// </summary>
        [JsonProperty("paymentMethod")]
        public string PaymentMethod { get; set; }

        /// <summary>
        /// Identifies the shipping service selected by the customer when placing this order. This value is given to ShipStation by the
        /// marketplace/cart. If value is "null" then the marketplace or cart does not support this field in ShipStation.
        /// </summary>
        [JsonProperty("requestedShippingService")]
        public string RequestedShippingService { get; set; }

        /// <summary>
        /// The code for the carrier that is to be used(or was used) when this order is shipped(was shipped).
        /// </summary>
        [JsonProperty("carrierCode")]
        public string CarrierCode { get; set; }

        /// <summary>
        /// The code for the shipping service that is to be used(or was used) when this order is shipped(was shipped).
        /// </summary>
        [JsonProperty("serviceCode")]
        public string ServiceCode { get; set; }

        /// <summary>
        /// The code for the package type that is to be used(or was used) when this order is shipped(was shipped).
        /// </summary>
        [JsonProperty("packageCode")]
        public string PackageCode { get; set; }

        /// <summary>
        /// The type of delivery confirmation that is to be used(or was used) when this order is shipped(was shipped).
        /// </summary>
        [JsonProperty("confirmation")]
        public string Confirmation { get; set; }

        /// <summary>
        /// The date the order was shipped.
        /// </summary>
        [JsonProperty("shipDate")]
        public DateTime? ShipDate { get; set; }

        /// <summary>
        /// If placed on hold, this date is the expiration date for this order's hold status. The order is moved back to awaiting_shipment
        /// on this date.
        /// </summary>
        [JsonProperty("holdUntilDate")]
        public DateTime? HoldUntilDate { get; set; }

        /// <summary>
        /// Weight of the order.
        /// </summary>
        [JsonProperty("weight")]
        public Weight Weight { get; set; }

        /// <summary>
        /// Dimensions of the order.
        /// </summary>
        [JsonProperty("dimensions")]
        public Dimensions Dimensions { get; set; }

        /// <summary>
        /// The shipping insurance information associated with this order.
        /// </summary>
        [JsonProperty("insuranceOptions")]
        public InsuranceOptions InsuranceOptions { get; set; }

        /// <summary>
        /// Customs information that can be used to generate customs documents for international orders.
        /// </summary>
        [JsonProperty("internationalOptions")]
        public InternationalOptions InternationalOptions { get; set; }

        /// <summary>
        /// Various advanced options that may be available depending on the shipping carrier that is used to ship the order.
        /// </summary>
        [JsonProperty("advancedOptions")]
        public AdvancedOptions AdvancedOptions { get; set; }

        /// <summary>
        /// Array of tagIds. Each tagId identifies a tag that has been associated with this order.
        /// </summary>
        [JsonProperty("tagIds")]
        public IList<string> TagIds { get; set; }

        /// <summary>
        /// User assigned to Order/Shipment in the GUID. Read-Only.
        /// </summary>
        [JsonProperty("userId")]
        public string UserId { get; set; }

        /// <summary>
        /// States whether the order has is current marked as externally fulfilled by the marketplace. A common example is when an Amazon
        /// order is marked an Amazon Fulfilled Network (AFN). If the order is an AFN then this element will be true. Read-Only.
        /// </summary>
        [JsonProperty("externallyFulfilled")]
        public bool? IsExternallyFulfilled { get; set; }

        /// <summary>
        /// If externallFulfilled is true then this string will return how the order is being fulfilled by the marketplace. Read-Only.
        /// </summary>
        [JsonProperty("externallyFulfilledBy")]
        public string ExternallyFulfilledBy { get; set; }

        /// <summary>
        /// Only required when creating a label. Specifies whether a test label should be created.
        /// </summary>
        [JsonProperty("testLabel")]
        public bool? TestLabelShouldBeCreated { get; set; }
    }
}
